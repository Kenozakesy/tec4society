{"version":3,"sources":["serviceWorker.js","components/counterList/counter/counter.jsx","components/counterList/counterList.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","props","state","value","tags","handleIncrement","setState","handleReset","bind","className","this","getBadgeClasses","formatCount","onClick","classes","length","map","tag","key","prevProps","prevState","snapshot","console","log","Component","CounterList","counters","id","counter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCqCSC,G,kBA5CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KANVC,MAAQ,CACJC,MAAO,EACPC,KAAM,CAAC,OAAO,OAAO,SAGN,EA8BnBC,gBAAkB,WACd,EAAKC,SAAS,CAAEH,MAAO,EAAKD,MAAMC,MAAQ,KA/B3B,EAiCnBI,YAAc,WACV,EAAKD,SAAS,CAAEH,MAAO,EAAKD,MAAMC,MAAQ,KAhC1C,EAAKE,gBAAkB,EAAKA,gBAAgBG,KAArB,gBAFR,E,sEAMT,IAAD,OACL,OACI,yBAAKC,UAAU,qBACX,0BAAMA,UAAWC,KAAKC,mBAAoBD,KAAKE,eAC/C,4BAAQH,UAAU,+BAA+BI,QAAU,kBAAM,EAAKR,oBAAtE,aACA,4BAAQI,UAAU,4BAA4BI,QAAU,kBAAM,EAAKN,gBAAnE,Y,oCAMG,IACHJ,EAAUO,KAAKR,MAAfC,MACR,OAAiB,IAAVA,EAAc,OAASA,I,wCAG9B,IAAIW,EAAU,qCAEd,OADAA,GAAgC,IAArBJ,KAAKR,MAAMC,MAAc,UAAY,Y,mCAIhD,OAA+B,IAA3BO,KAAKR,MAAME,KAAKW,OAAqB,gDAClC,4BAAML,KAAKR,MAAME,KAAKY,KAAI,SAAAC,GAAG,OAAI,wBAAIC,IAAKD,GAAMA,S,yCAUxCE,EAAWC,EAAWC,GACrCC,QAAQC,IAAIb,KAAKR,MAAMC,W,GA/CTqB,cC6BPC,G,iNA1BXvB,MAAQ,CACJwB,SAAU,CACN,CAAEC,GAAI,EAAGxB,MAAO,GAChB,CAAEwB,GAAI,EAAGxB,MAAO,GAChB,CAAEwB,GAAI,EAAGxB,MAAO,GAChB,CAAEwB,GAAI,EAAGxB,MAAO,K,wEAUpB,OACI,6BACMO,KAAKR,MAAMwB,SAASV,KAAI,SAAAY,GAAO,OAC7B,kBAAC,EAAD,CAASV,IAAKU,EAAQD,GAAIxB,MAAOyB,EAAQzB,MAAOwB,GAAIC,EAAQD,a,GApBtDH,cCM1BK,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SHuHnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e866b997.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './counter.css'\r\n\r\nclass Counter extends Component {\r\n\r\n    //State\r\n    state = {\r\n        value: 0,\r\n        tags: ['tag1','tag2','tag3']\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleIncrement = this.handleIncrement.bind(this);\r\n    }\r\n\r\n    //HTML\r\n    render() {\r\n        return (\r\n            <div className=\"flex-column align\">\r\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n                <button className=\"btn btn-secondary btn-sm m-2\" onClick={ () => this.handleIncrement()}>Increment</button>\r\n                <button className=\"btn btn-danger btn-sm m-2\" onClick={ () => this.handleReset()}>Reset</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //Methods\r\n    formatCount() {\r\n        const { value } = this.state;\r\n        return value === 0 ? \"Zero\" : value;\r\n    }\r\n    getBadgeClasses() {\r\n        let classes = \"warningButtonText badge m-2 badge-\";\r\n        classes += this.state.value === 0 ? \"warning\" : \"primary\"\r\n        return classes;\r\n    }\r\n    renderTags() {\r\n        if (this.state.tags.length === 0) return <p>There are no tags</p>\r\n        return <ul>{ this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul>\r\n    }\r\n    handleIncrement = () => {\r\n        this.setState({ value: this.state.value + 1})\r\n    }\r\n    handleReset = () => {\r\n        this.setState({ value: this.state.value = 0})\r\n    }\r\n\r\n    // runs when the page is updates\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(this.state.value)\r\n    }\r\n}\r\n\r\nCounter.propTypes = {};\r\nexport default Counter;\r\n\r\n","import React, {Component} from 'react';\r\nimport Counter from \"./counter/counter\"\r\nimport './counterList.css'\r\n\r\nclass CounterList extends Component {\r\n\r\n    state = {\r\n        counters: [\r\n            { id: 1, value: 4},\r\n            { id: 2, value: 0},\r\n            { id: 3, value: 0},\r\n            { id: 4, value: 0},\r\n        ]\r\n    }\r\n\r\n    // constructor(props) {\r\n    //     super(props)\r\n    //\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.counters.map(counter =>\r\n                    <Counter key={counter.id} value={counter.value} id={counter.id} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCounterList.propTypes = {};\r\nexport default CounterList;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n// import App from './components/app/App';\r\n// import Counter from \"./components/counter/counter\";\r\nimport CounterList from \"./components/counterList/counterList\";\r\n\r\nReactDOM.render(<CounterList />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}